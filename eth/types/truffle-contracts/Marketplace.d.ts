/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MarketplaceContract
  extends Truffle.Contract<MarketplaceInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MarketplaceInstance>;
}

export interface NFTListed {
  name: "NFTListed";
  args: {
    nftContract: string;
    tokenId: BN;
    seller: string;
    owner: string;
    price: BN;
    0: string;
    1: BN;
    2: string;
    3: string;
    4: BN;
  };
}

export interface NFTSold {
  name: "NFTSold";
  args: {
    nftContract: string;
    tokenId: BN;
    seller: string;
    owner: string;
    price: BN;
    0: string;
    1: BN;
    2: string;
    3: string;
    4: BN;
  };
}

type AllEvents = NFTListed | NFTSold;

export interface MarketplaceInstance extends Truffle.ContractInstance {
  LISTING_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  listNft: {
    (
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyNft: {
    (
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nftContract: string,
      _tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resellNft: {
    (
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nftContract: string,
      _tokenId: number | BN | string,
      _price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getListingFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getListedNfts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      nftContract: string;
      tokenId: BN;
      seller: string;
      owner: string;
      price: BN;
      listed: boolean;
    }[]
  >;

  getMyNfts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      nftContract: string;
      tokenId: BN;
      seller: string;
      owner: string;
      price: BN;
      listed: boolean;
    }[]
  >;

  getMyListedNfts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      nftContract: string;
      tokenId: BN;
      seller: string;
      owner: string;
      price: BN;
      listed: boolean;
    }[]
  >;

  methods: {
    LISTING_FEE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    listNft: {
      (
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyNft: {
      (
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nftContract: string,
        _tokenId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    resellNft: {
      (
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nftContract: string,
        _tokenId: number | BN | string,
        _price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getListingFee(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getListedNfts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        nftContract: string;
        tokenId: BN;
        seller: string;
        owner: string;
        price: BN;
        listed: boolean;
      }[]
    >;

    getMyNfts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        nftContract: string;
        tokenId: BN;
        seller: string;
        owner: string;
        price: BN;
        listed: boolean;
      }[]
    >;

    getMyListedNfts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        nftContract: string;
        tokenId: BN;
        seller: string;
        owner: string;
        price: BN;
        listed: boolean;
      }[]
    >;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
