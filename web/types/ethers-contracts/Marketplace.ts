/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Marketplace {
  export type NFTStruct = {
    nftContract: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    listed: PromiseOrValue<boolean>;
  };

  export type NFTStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    nftContract: string;
    tokenId: BigNumber;
    seller: string;
    owner: string;
    price: BigNumber;
    listed: boolean;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "LISTING_FEE()": FunctionFragment;
    "listNft(address,uint256,uint256)": FunctionFragment;
    "buyNft(address,uint256)": FunctionFragment;
    "resellNft(address,uint256,uint256)": FunctionFragment;
    "getListingFee()": FunctionFragment;
    "getListedNfts()": FunctionFragment;
    "getMyNfts()": FunctionFragment;
    "getMyListedNfts()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LISTING_FEE"
      | "listNft"
      | "buyNft"
      | "resellNft"
      | "getListingFee"
      | "getListedNfts"
      | "getMyNfts"
      | "getMyListedNfts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LISTING_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listNft",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buyNft",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resellNft",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getListedNfts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMyNfts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMyListedNfts",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "LISTING_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resellNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListedNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyNfts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMyListedNfts",
    data: BytesLike
  ): Result;

  events: {
    "NFTListed(address,uint256,address,address,uint256)": EventFragment;
    "NFTSold(address,uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NFTListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTSold"): EventFragment;
}

export interface NFTListedEventObject {
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
}
export type NFTListedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  NFTListedEventObject
>;

export type NFTListedEventFilter = TypedEventFilter<NFTListedEvent>;

export interface NFTSoldEventObject {
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
}
export type NFTSoldEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  NFTSoldEventObject
>;

export type NFTSoldEventFilter = TypedEventFilter<NFTSoldEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LISTING_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    listNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resellNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getListingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getListedNfts(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NFTStructOutput[]]>;

    getMyNfts(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NFTStructOutput[]]>;

    getMyListedNfts(
      overrides?: CallOverrides
    ): Promise<[Marketplace.NFTStructOutput[]]>;
  };

  LISTING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  listNft(
    _nftContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyNft(
    _nftContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resellNft(
    _nftContract: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

  getListedNfts(
    overrides?: CallOverrides
  ): Promise<Marketplace.NFTStructOutput[]>;

  getMyNfts(overrides?: CallOverrides): Promise<Marketplace.NFTStructOutput[]>;

  getMyListedNfts(
    overrides?: CallOverrides
  ): Promise<Marketplace.NFTStructOutput[]>;

  callStatic: {
    LISTING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    listNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resellNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getListedNfts(
      overrides?: CallOverrides
    ): Promise<Marketplace.NFTStructOutput[]>;

    getMyNfts(
      overrides?: CallOverrides
    ): Promise<Marketplace.NFTStructOutput[]>;

    getMyListedNfts(
      overrides?: CallOverrides
    ): Promise<Marketplace.NFTStructOutput[]>;
  };

  filters: {
    "NFTListed(address,uint256,address,address,uint256)"(
      nftContract?: null,
      tokenId?: null,
      seller?: null,
      owner?: null,
      price?: null
    ): NFTListedEventFilter;
    NFTListed(
      nftContract?: null,
      tokenId?: null,
      seller?: null,
      owner?: null,
      price?: null
    ): NFTListedEventFilter;

    "NFTSold(address,uint256,address,address,uint256)"(
      nftContract?: null,
      tokenId?: null,
      seller?: null,
      owner?: null,
      price?: null
    ): NFTSoldEventFilter;
    NFTSold(
      nftContract?: null,
      tokenId?: null,
      seller?: null,
      owner?: null,
      price?: null
    ): NFTSoldEventFilter;
  };

  estimateGas: {
    LISTING_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    listNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resellNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getListingFee(overrides?: CallOverrides): Promise<BigNumber>;

    getListedNfts(overrides?: CallOverrides): Promise<BigNumber>;

    getMyNfts(overrides?: CallOverrides): Promise<BigNumber>;

    getMyListedNfts(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LISTING_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resellNft(
      _nftContract: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getListingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getListedNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMyListedNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
