/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Marketplace, MarketplaceInterface } from "../Marketplace";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "NFTListed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "NFTSold",
    type: "event",
  },
  {
    inputs: [],
    name: "LISTING_FEE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "listNft",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "buyNft",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "resellNft",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
  {
    inputs: [],
    name: "getListingFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getListedNfts",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "listed",
            type: "bool",
          },
        ],
        internalType: "struct Marketplace.NFT[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getMyNfts",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "listed",
            type: "bool",
          },
        ],
        internalType: "struct Marketplace.NFT[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "getMyListedNfts",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nftContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "seller",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "listed",
            type: "bool",
          },
        ],
        internalType: "struct Marketplace.NFT[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
];

const _bytecode =
  "0x6080604052655af3107a400060035534801561001a57600080fd5b50600160008190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611cba806100736000396000f3fe60806040526004361061007b5760003560e01c80634ddf4f8f1161004e5780634ddf4f8f1461011d5780638d6cb3fb14610139578063b8fe6abe14610164578063c922b17c1461018f5761007b565b8063047b07bf146100805780631f4cc4db146100ab5780632b86ae38146100d657806334f5b62414610101575b600080fd5b34801561008c57600080fd5b506100956101ab565b6040516100a29190611614565b60405180910390f35b3480156100b757600080fd5b506100c06104de565b6040516100cd9190611614565b60405180910390f35b3480156100e257600080fd5b506100eb610883565b6040516100f89190611645565b60405180910390f35b61011b600480360381019061011691906116bd565b610889565b005b61013760048036038101906101329190611710565b610ae6565b005b34801561014557600080fd5b5061014e610dbe565b60405161015b9190611614565b60405180910390f35b34801561017057600080fd5b50610179611026565b6040516101869190611645565b60405180910390f35b6101a960048036038101906101a491906116bd565b611030565b005b606060006101b9600261135a565b90506000805b8281101561025e573373ffffffffffffffffffffffffffffffffffffffff16600560006001846101ef919061177f565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361024b578180610247906117d5565b9250505b8080610256906117d5565b9150506101bf565b5060008167ffffffffffffffff81111561027b5761027a61181d565b5b6040519080825280602002602001820160405280156102b457816020015b6102a16113da565b8152602001906001900390816102995790505b5090506000805b848110156104d3573373ffffffffffffffffffffffffffffffffffffffff16600560006001846102eb919061177f565b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036104c05760056000600183610349919061177f565b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff1615151515815250508383815181106104a6576104a561184c565b5b602002602001018190525081806104bc906117d5565b9250505b80806104cb906117d5565b9150506102bb565b508194505050505090565b606060006104ec600261135a565b90506000805b828110156105ca573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610522919061177f565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156105a3575060056000600183610583919061177f565b815260200190815260200160002060050160009054906101000a900460ff165b156105b75781806105b3906117d5565b9250505b80806105c2906117d5565b9150506104f2565b5060008167ffffffffffffffff8111156105e7576105e661181d565b5b60405190808252806020026020018201604052801561062057816020015b61060d6113da565b8152602001906001900390816106055790505b5090506000805b84811015610878573373ffffffffffffffffffffffffffffffffffffffff1660056000600184610657919061177f565b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480156106d85750600560006001836106b8919061177f565b815260200190815260200160002060050160009054906101000a900460ff165b1561086557600560006001836106ee919061177f565b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff16151515158152505083838151811061084b5761084a61184c565b5b60200260200101819052508180610861906117d5565b9250505b8080610870906117d5565b915050610627565b508194505050505090565b60035481565b6002600054036108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c5906118d8565b60405180910390fd5b600260008190555060008111610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091090611944565b60405180910390fd5b600354341461095d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610954906119b0565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161099a939291906119df565b600060405180830381600087803b1580156109b457600080fd5b505af11580156109c8573d6000803e3d6000fd5b505050506000600560008481526020019081526020016000209050338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550308160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160050160006101000a81548160ff021916908315150217905550818160040181905550610a996001611368565b7fa0c6c0d02d86fdacecbaa5fdf5894bab204e31a778250474108540733a9b8d198484333086604051610ad0959493929190611a16565b60405180910390a1506001600081905550505050565b600260005403610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b22906118d8565b60405180910390fd5b600260008190555060006005600083815260200190815260200160002090508060040154341015610b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8890611adb565b60405180910390fd5b60003390508160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610c00573d6000803e3d6000fd5b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd308385600101546040518463ffffffff1660e01b8152600401610c4293929190611b5a565b600060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b50505050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6003549081150290604051600060405180830381858888f19350505050158015610cde573d6000803e3d6000fd5b50808260030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008260050160006101000a81548160ff021916908315150217905550610d4960016113c4565b7f16f1dbd97e6bf646d429ed186cce832f1f7fd9907814293b83181e9970ab7bd28483600101548460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168434604051610da8959493929190611b91565b60405180910390a1505060016000819055505050565b60606000610dcc600261135a565b90506000610dda600161135a565b82610de59190611be4565b905060008167ffffffffffffffff811115610e0357610e0261181d565b5b604051908082528060200260200182016040528015610e3c57816020015b610e296113da565b815260200190600190039081610e215790505b5090506000805b8481101561101b5760056000600183610e5c919061177f565b815260200190815260200160002060050160009054906101000a900460ff16156110085760056000600183610e91919061177f565b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900460ff161515151581525050838381518110610fee57610fed61184c565b5b60200260200101819052508180611004906117d5565b9250505b8080611013906117d5565b915050610e43565b508194505050505090565b6000600354905090565b600260005403611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106c906118d8565b60405180910390fd5b6002600081905550600081116110c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b790611944565b60405180910390fd5b6003543414611104576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fb906119b0565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611141939291906119df565b600060405180830381600087803b15801561115b57600080fd5b505af115801561116f573d6000803e3d6000fd5b5050505061117d60026113c4565b6040518060c001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020013373ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001828152602001600115158152506005600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548160ff0219169083151502179055509050507fa0c6c0d02d86fdacecbaa5fdf5894bab204e31a778250474108540733a9b8d198383333085604051611345959493929190611a16565b60405180910390a16001600081905550505050565b600081600001549050919050565b600081600001549050600081116113b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ab90611c64565b60405180910390fd5b6001810382600001819055505050565b6001816000016000828254019250508190555050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114ab82611480565b9050919050565b6114bb816114a0565b82525050565b6000819050919050565b6114d4816114c1565b82525050565b60006114e582611480565b9050919050565b6114f5816114da565b82525050565b60008115159050919050565b611510816114fb565b82525050565b60c08201600082015161152c60008501826114b2565b50602082015161153f60208501826114cb565b50604082015161155260408501826114ec565b50606082015161156560608501826114ec565b50608082015161157860808501826114cb565b5060a082015161158b60a0850182611507565b50505050565b600061159d8383611516565b60c08301905092915050565b6000602082019050919050565b60006115c182611454565b6115cb818561145f565b93506115d683611470565b8060005b838110156116075781516115ee8882611591565b97506115f9836115a9565b9250506001810190506115da565b5085935050505092915050565b6000602082019050818103600083015261162e81846115b6565b905092915050565b61163f816114c1565b82525050565b600060208201905061165a6000830184611636565b92915050565b600080fd5b61166e816114a0565b811461167957600080fd5b50565b60008135905061168b81611665565b92915050565b61169a816114c1565b81146116a557600080fd5b50565b6000813590506116b781611691565b92915050565b6000806000606084860312156116d6576116d5611660565b5b60006116e48682870161167c565b93505060206116f5868287016116a8565b9250506040611706868287016116a8565b9150509250925092565b6000806040838503121561172757611726611660565b5b60006117358582860161167c565b9250506020611746858286016116a8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061178a826114c1565b9150611795836114c1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117ca576117c9611750565b5b828201905092915050565b60006117e0826114c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361181257611811611750565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006118c2601f8361187b565b91506118cd8261188c565b602082019050919050565b600060208201905081810360008301526118f1816118b5565b9050919050565b7f5072696365206d757374206265206174206c6561737420312077656900000000600082015250565b600061192e601c8361187b565b9150611939826118f8565b602082019050919050565b6000602082019050818103600083015261195d81611921565b9050919050565b7f4e6f7420656e6f75676820657468657220666f72206c697374696e6720666565600082015250565b600061199a60208361187b565b91506119a582611964565b602082019050919050565b600060208201905081810360008301526119c98161198d565b9050919050565b6119d9816114a0565b82525050565b60006060820190506119f460008301866119d0565b611a0160208301856119d0565b611a0e6040830184611636565b949350505050565b600060a082019050611a2b60008301886119d0565b611a386020830187611636565b611a4560408301866119d0565b611a5260608301856119d0565b611a5f6080830184611636565b9695505050505050565b7f4e6f7420656e6f75676820657468657220746f20636f7665722061736b696e6760008201527f2070726963650000000000000000000000000000000000000000000000000000602082015250565b6000611ac560268361187b565b9150611ad082611a69565b604082019050919050565b60006020820190508181036000830152611af481611ab8565b9050919050565b6000819050919050565b6000611b20611b1b611b1684611480565b611afb565b611480565b9050919050565b6000611b3282611b05565b9050919050565b6000611b4482611b27565b9050919050565b611b5481611b39565b82525050565b6000606082019050611b6f60008301866119d0565b611b7c6020830185611b4b565b611b896040830184611636565b949350505050565b600060a082019050611ba660008301886119d0565b611bb36020830187611636565b611bc06040830186611b4b565b611bcd6060830185611b4b565b611bda6080830184611636565b9695505050505050565b6000611bef826114c1565b9150611bfa836114c1565b925082821015611c0d57611c0c611750565b5b828203905092915050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b6000611c4e601b8361187b565b9150611c5982611c18565b602082019050919050565b60006020820190508181036000830152611c7d81611c41565b905091905056fea26469706673582212203f11f304fafabcb98729b656492a2870d3b95b1a0e0c51b179c212a259b5f4a664736f6c634300080d0033";

type MarketplaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketplaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Marketplace__factory extends ContractFactory {
  constructor(...args: MarketplaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Marketplace> {
    return super.deploy(overrides || {}) as Promise<Marketplace>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Marketplace {
    return super.attach(address) as Marketplace;
  }
  override connect(signer: Signer): Marketplace__factory {
    return super.connect(signer) as Marketplace__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketplaceInterface {
    return new utils.Interface(_abi) as MarketplaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Marketplace {
    return new Contract(address, _abi, signerOrProvider) as Marketplace;
  }
}
